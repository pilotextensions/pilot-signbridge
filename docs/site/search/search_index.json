{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Bring secure digital signatures directly into your browser. Use your existing certificates to sign and verify files safely \u2014 no servers, no data leaks. Installation To use Pilot-SignBridge , you must install both components : Browser Extension \u2b07\ufe0f Install from Chrome Web Store . The extension connects your browser to the native signing app. Windows Application \u2b07\ufe0f Download PilotSignBridge.msi . This companion app communicates with your local cryptographic provider (e.g., CryptoPro). After installation, it runs in the background and handles signing/verification requests. Pilot-Web Extension \u2b07\ufe0f Download Pilot-Web Extension . This extension enables integration with the Pilot-Web Client for seamless signing operations. \u26a0\ufe0f Both the extension and the Windows app must be installed \u2014 the extension alone will not work. Why Pilot-SignBridge? Works with your existing cryptographic provider Keeps private keys on your device Easy integration with web apps Check Extension Installed Run Extension Check Documentation Global API Certificate Interface Verification Response Verification Status \ud83d\udca1 Pilot-SignBridge is currently in beta . We\u2019re improving every day \u2014 your feedback is welcome!","title":"Pilot-SignBridge"},{"location":"#installation","text":"To use Pilot-SignBridge , you must install both components : Browser Extension \u2b07\ufe0f Install from Chrome Web Store . The extension connects your browser to the native signing app. Windows Application \u2b07\ufe0f Download PilotSignBridge.msi . This companion app communicates with your local cryptographic provider (e.g., CryptoPro). After installation, it runs in the background and handles signing/verification requests. Pilot-Web Extension \u2b07\ufe0f Download Pilot-Web Extension . This extension enables integration with the Pilot-Web Client for seamless signing operations. \u26a0\ufe0f Both the extension and the Windows app must be installed \u2014 the extension alone will not work.","title":"Installation"},{"location":"#why-pilot-signbridge","text":"Works with your existing cryptographic provider Keeps private keys on your device Easy integration with web apps","title":"Why Pilot-SignBridge?"},{"location":"#check-extension-installed","text":"Run Extension Check","title":"Check Extension Installed"},{"location":"#documentation","text":"Global API Certificate Interface Verification Response Verification Status \ud83d\udca1 Pilot-SignBridge is currently in beta . We\u2019re improving every day \u2014 your feedback is welcome!","title":"Documentation"},{"location":"check-extension/","text":"When you open this page, the script below will automatically check if Pilot-SignBridge is available and display the result. Checking Extension... document.addEventListener(\"DOMContentLoaded\", async () => { const resultBox = document.getElementById(\"Extension-check-result\"); const certList = document.getElementById(\"cert-list\"); if (!window.pilotSignBridge) { resultBox.style.color = \"red\"; resultBox.textContent = \"\u274c Pilot-SignBridge is not detected. Please install or enable it.\"; return; } resultBox.style.color = \"green\"; resultBox.textContent = \"\u2705 Pilot-SignBridge is available!\"; try { const certs = await window.pilotSignBridge.getCerts(); if (certs.length > 0) { resultBox.textContent += ` Found ${certs.length} certificate(s).`; // Build a list of certificates let list = \"<ul style='margin-top:1em;'>\"; certs.forEach(cert => { list += `<li style='margin-bottom:0.5em;'> <strong>${cert.SubjectName || cert.Subject}</strong><br/> Thumbprint: <code>${cert.Thumbprint}</code><br/> Valid: ${cert.ValidFromDate} \u2192 ${cert.ValidToDate} </li>`; }); list += \"</ul>\"; certList.innerHTML = list; } else { resultBox.textContent += \" No certificates found.\"; } } catch (err) { resultBox.style.color = \"orange\"; resultBox.textContent = \"\u26a0\ufe0f Extension detected, but error retrieving certificates: \" + err.message; } });","title":"Check Extension"},{"location":"api/certificate/","text":"The ICertificate interface describes the metadata of a digital certificate that can be retrieved using window.pilotSignBridge.getCerts() . Type Definition export interface ICertificate { /** Unique identifier of the certificate. */ get Thumbprint () : string ; /** Expiration date of the certificate (ISO 8601 string). */ get ValidToDate () : string ; /** Start date of the certificate validity (ISO 8601 string). */ get ValidFromDate () : string ; /** Issuer information (e.g., CA name). */ get Issuer () : string ; /** Full subject information (distinguished name). */ get Subject () : string ; /** Common name or friendly subject name. */ get SubjectName () : string ; /** Object Identifier (OID) of the public key algorithm. */ get PublicKeyOid () : string ; } Example const certs = await window . pilotSignBridge ? . getCerts (); if ( certs && certs . length > 0 ) { const cert : ICertificate = certs [ 0 ]; console . log ( \"Thumbprint:\" , cert . Thumbprint ); console . log ( \"Issuer:\" , cert . Issuer ); console . log ( \"Valid from:\" , cert . ValidFromDate , \"to\" , cert . ValidToDate ); }","title":"ICertificate interface"},{"location":"api/certificate/#type-definition","text":"export interface ICertificate { /** Unique identifier of the certificate. */ get Thumbprint () : string ; /** Expiration date of the certificate (ISO 8601 string). */ get ValidToDate () : string ; /** Start date of the certificate validity (ISO 8601 string). */ get ValidFromDate () : string ; /** Issuer information (e.g., CA name). */ get Issuer () : string ; /** Full subject information (distinguished name). */ get Subject () : string ; /** Common name or friendly subject name. */ get SubjectName () : string ; /** Object Identifier (OID) of the public key algorithm. */ get PublicKeyOid () : string ; }","title":"Type Definition"},{"location":"api/certificate/#example","text":"const certs = await window . pilotSignBridge ? . getCerts (); if ( certs && certs . length > 0 ) { const cert : ICertificate = certs [ 0 ]; console . log ( \"Thumbprint:\" , cert . Thumbprint ); console . log ( \"Issuer:\" , cert . Issuer ); console . log ( \"Valid from:\" , cert . ValidFromDate , \"to\" , cert . ValidToDate ); }","title":"Example"},{"location":"api/global/","text":"The Pilot-SignBridge API is exposed through the global window object. It provides methods for working with certificates, signing, and verifying files. Type Definition interface Window { pilotSignBridge ?: { /** * Returns the list of available certificates. */ getCerts : () => Promise < ICertificate [] > ; /** * Creates a detached signature for the given file using the specified * certificate. * @param certThumbprint - The thumbprint of the certificate to use. * @param file - The file contents as an ArrayBuffer. * @returns Base64-encoded signature string. */ signFile : ( certThumbprint : string , file : ArrayBuffer ) => Promise < string > ; /** * Verifies a file against a detached signature. * @param signatureBase64 - Base64-encoded signature string. * @param file - The file contents as an ArrayBuffer. * @returns Verification result object. */ verifyFile : ( signatureBase64 : string , file : ArrayBuffer ) => Promise < any > ; /** * Returns the list of supported signature algorithms. */ getSupportedAlgorithms : () => Promise < string [] > ; }; } Usage 1. Get Certificates if ( ! window . pilotSignBridge ) { console . error ( \"Pilot-SignBridge is not available.\" ); return ; } const certs = await window . pilotSignBridge . getCerts (); if ( certs . length > 0 ) { console . log ( \"Available certificates:\" , certs ); console . log ( \"First cert thumbprint:\" , certs [ 0 ]. Thumbprint ); } 2. Sign a File if ( ! window . pilotSignBridge ) { console . error ( \"Pilot-SignBridge is not available.\" ); return ; } const arrayBuffer = new TextEncoder (). encode ( \"Hello, world!\" ). buffer ; const certThumbprint = \"ad296563ea27fff58c15fda728ce38914c9d5f5f\" ; const signedBase64 = await window . pilotSignBridge . signFile ( certThumbprint , arrayBuffer ); console . log ( \"Signed data:\" , signedBase64 ); 3. Verify a File if ( ! window . pilotSignBridge ) { console . error ( \"Pilot-SignBridge is not available.\" ); return ; } const result = await window . pilotSignBridge . verifyFile ( signBase64 , file ); console . log ( \"Verification result:\" , result ); 4. Get Supported Algorithms if ( ! window . pilotSignBridge ) { console . error ( \"Pilot-SignBridge is not available.\" ); return ; } const algorithms = await window . pilotSignBridge . getSupportedAlgorithms (); console . log ( \"Supported algorithms:\" , algorithms );","title":"Pilot-SignBridge Global API"},{"location":"api/global/#type-definition","text":"interface Window { pilotSignBridge ?: { /** * Returns the list of available certificates. */ getCerts : () => Promise < ICertificate [] > ; /** * Creates a detached signature for the given file using the specified * certificate. * @param certThumbprint - The thumbprint of the certificate to use. * @param file - The file contents as an ArrayBuffer. * @returns Base64-encoded signature string. */ signFile : ( certThumbprint : string , file : ArrayBuffer ) => Promise < string > ; /** * Verifies a file against a detached signature. * @param signatureBase64 - Base64-encoded signature string. * @param file - The file contents as an ArrayBuffer. * @returns Verification result object. */ verifyFile : ( signatureBase64 : string , file : ArrayBuffer ) => Promise < any > ; /** * Returns the list of supported signature algorithms. */ getSupportedAlgorithms : () => Promise < string [] > ; }; }","title":"Type Definition"},{"location":"api/global/#usage","text":"","title":"Usage"},{"location":"api/global/#1-get-certificates","text":"if ( ! window . pilotSignBridge ) { console . error ( \"Pilot-SignBridge is not available.\" ); return ; } const certs = await window . pilotSignBridge . getCerts (); if ( certs . length > 0 ) { console . log ( \"Available certificates:\" , certs ); console . log ( \"First cert thumbprint:\" , certs [ 0 ]. Thumbprint ); }","title":"1. Get Certificates"},{"location":"api/global/#2-sign-a-file","text":"if ( ! window . pilotSignBridge ) { console . error ( \"Pilot-SignBridge is not available.\" ); return ; } const arrayBuffer = new TextEncoder (). encode ( \"Hello, world!\" ). buffer ; const certThumbprint = \"ad296563ea27fff58c15fda728ce38914c9d5f5f\" ; const signedBase64 = await window . pilotSignBridge . signFile ( certThumbprint , arrayBuffer ); console . log ( \"Signed data:\" , signedBase64 );","title":"2. Sign a File"},{"location":"api/global/#3-verify-a-file","text":"if ( ! window . pilotSignBridge ) { console . error ( \"Pilot-SignBridge is not available.\" ); return ; } const result = await window . pilotSignBridge . verifyFile ( signBase64 , file ); console . log ( \"Verification result:\" , result );","title":"3. Verify a File"},{"location":"api/global/#4-get-supported-algorithms","text":"if ( ! window . pilotSignBridge ) { console . error ( \"Pilot-SignBridge is not available.\" ); return ; } const algorithms = await window . pilotSignBridge . getSupportedAlgorithms (); console . log ( \"Supported algorithms:\" , algorithms );","title":"4. Get Supported Algorithms"},{"location":"api/verification/","text":"The IVerifyStream interface describes the result returned after a file signature verification process. Type Definition interface IVerifyStream { /** Indicates whether the verification was successful. */ ok : boolean ; /** Error message if verification failed (optional). */ error? : string ; /** Optional verification session identifier. */ session? : string ; /** Verification status. */ status : SignatureVerificationStatus ; /** Type of CAdES signature (e.g., CAdES-BES, CAdES-T). */ cadesType : string ; } \ud83d\udc49 The status field uses the SignatureVerificationStatus enumeration for standardized status values. Example const response : IVerifyStream = await window . pilotSignBridge ? . verifyFile ( signatureBase64 , file ); if ( response . ok ) { console . log ( \"Signature valid, type:\" , response . cadesType ); } else { console . error ( \"Verification failed:\" , response . error ); }","title":"IVerifyStream Interface"},{"location":"api/verification/#type-definition","text":"interface IVerifyStream { /** Indicates whether the verification was successful. */ ok : boolean ; /** Error message if verification failed (optional). */ error? : string ; /** Optional verification session identifier. */ session? : string ; /** Verification status. */ status : SignatureVerificationStatus ; /** Type of CAdES signature (e.g., CAdES-BES, CAdES-T). */ cadesType : string ; } \ud83d\udc49 The status field uses the SignatureVerificationStatus enumeration for standardized status values.","title":"Type Definition"},{"location":"api/verification/#example","text":"const response : IVerifyStream = await window . pilotSignBridge ? . verifyFile ( signatureBase64 , file ); if ( response . ok ) { console . log ( \"Signature valid, type:\" , response . cadesType ); } else { console . error ( \"Verification failed:\" , response . error ); }","title":"Example"},{"location":"api/verificationstatus/","text":"The SignatureVerificationStatus enumeration defines possible outcomes of a file signature verification. Definition enum SignatureVerificationStatus { /** The signature is valid and matches the file. */ Valid = 0 , /** The signature is invalid or does not match the file. */ Invalid = 1 , /** An error occurred during the verification process. */ Error = 2 } Usage Example if ( response . status === SignatureVerificationStatus . Valid ) { console . log ( \"The file signature is valid.\" ); } else if ( response . status === SignatureVerificationStatus . Invalid ) { console . warn ( \"The file signature is invalid.\" ); } else { console . error ( \"Verification failed due to an error.\" ); } \ud83d\udc49 This page integrates with the IVerifyStream documentation.","title":"SignatureVerificationStatus Enum"},{"location":"api/verificationstatus/#definition","text":"enum SignatureVerificationStatus { /** The signature is valid and matches the file. */ Valid = 0 , /** The signature is invalid or does not match the file. */ Invalid = 1 , /** An error occurred during the verification process. */ Error = 2 }","title":"Definition"},{"location":"api/verificationstatus/#usage-example","text":"if ( response . status === SignatureVerificationStatus . Valid ) { console . log ( \"The file signature is valid.\" ); } else if ( response . status === SignatureVerificationStatus . Invalid ) { console . warn ( \"The file signature is invalid.\" ); } else { console . error ( \"Verification failed due to an error.\" ); } \ud83d\udc49 This page integrates with the IVerifyStream documentation.","title":"Usage Example"}]}